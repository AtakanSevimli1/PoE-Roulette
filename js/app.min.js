document.addEventListener('DOMContentLoaded',()=>{const generateBtn=document.getElementById('generate-btn');const skillDisplay=document.getElementById('skill-display');const skillName=document.getElementById('skill-name');const skillType=document.getElementById('skill-type');const skillColor=document.getElementById('skill-color');const skillDescription=document.getElementById('skill-description');const dataService=new SkillDataService(skillsData);const state={currentSkill:null,history:[],historyMaxSize:5,isLoading:false,initialized:false};generateBtn.addEventListener('click',handleGenerateClick);document.addEventListener('keydown',(event)=>{if(event.code==='Space'&&!['INPUT','TEXTAREA','SELECT'].includes(document.activeElement.tagName)){event.preventDefault();handleGenerateClick()}});function handleGenerateClick(){if(state.isLoading)return;setLoading(true);if(!skillDisplay.classList.contains('hidden')){skillDisplay.classList.add('generating');skillDisplay.classList.add('skill-animation-out');setTimeout(()=>{try{generateRandomSkill()}catch(error){handleError(error)}finally{setLoading(false);skillDisplay.classList.remove('generating','skill-animation-out')}},400)}else{setTimeout(()=>{try{generateRandomSkill()}catch(error){handleError(error)}finally{setLoading(false)}},300)}}function setLoading(isLoading){state.isLoading=isLoading;if(isLoading){generateBtn.classList.add('loading');generateBtn.setAttribute('disabled','disabled');generateBtn.setAttribute('aria-busy','true');generateBtn.innerHTML='Generating<span class=\"loading-dots\"></span>';if(!skillDisplay.classList.contains('hidden')){showLoadingSpinner()}}else{generateBtn.classList.remove('loading');generateBtn.removeAttribute('disabled');generateBtn.removeAttribute('aria-busy');generateBtn.textContent='Generate Random Skill';hideLoadingSpinner()}}function showLoadingSpinner(){const existingSpinner=skillDisplay.querySelector('.skill-loading');if(!existingSpinner){const loadingDiv=document.createElement('div');loadingDiv.className='skill-loading';loadingDiv.innerHTML='<div class=\"spinner\" aria-label=\"Loading new skill\"></div>';skillDisplay.appendChild(loadingDiv)}}function hideLoadingSpinner(){const spinner=skillDisplay.querySelector('.skill-loading');if(spinner){spinner.remove()}}function handleError(error){console.error('Error generating random skill:',error);skillName.textContent='Error';skillDescription.textContent='Failed to generate a random skill. Please try again.';skillDescription.style.display='block';skillType.style.display='none';skillColor.style.display='none';if(skillDisplay.classList.contains('hidden')){skillDisplay.classList.remove('hidden')}}function generateRandomSkill(){try{const allSkills=dataService.getAllSkills();if(!allSkills||allSkills.length===0){throw new Error('No skill data available')}const randomSkill=getRandomSkill();if(state.currentSkill){addToHistory(state.currentSkill)}state.currentSkill=randomSkill;updateSkillDisplay(randomSkill);if(skillDisplay.classList.contains('hidden')){skillDisplay.classList.remove('hidden')}smoothAnimation(()=>{skillDisplay.classList.add('skill-animation');setTimeout(()=>{skillDisplay.classList.remove('skill-animation')},600)});if(!state.initialized){state.initialized=true}saveToLocalStorage();return true}catch(error){console.error('Error in generateRandomSkill:',error);handleError(error);return false}}function addToHistory(skill){state.history.unshift(skill);if(state.history.length>state.historyMaxSize){state.history.pop()}}function isInHistory(skill){return state.history.some(historicSkill=>historicSkill.name===skill.name)}function getRandomSkill(){try{return dataService.getRandomSkill(state.history)}catch(error){console.error('Error getting random skill:',error);if(skillsData&&skillsData.length>0){const randomIndex=Math.floor(Math.random()*skillsData.length);return skillsData[randomIndex]}else{throw new Error('No skill data available')}}}function updateSkillDisplay(skill){skillName.textContent=skill.name;skillName.className='';if(skill.type){skillType.textContent=`Type: ${skill.type}`;skillType.style.display='block'}else{skillType.style.display='none'}if(skill.color){skillColor.textContent=`Gem Color: ${skill.color}`;skillColor.style.display='block';if(skill.color.toLowerCase().includes('red')){skillName.classList.add('gem-red')}else if(skill.color.toLowerCase().includes('green')){skillName.classList.add('gem-green')}else if(skill.color.toLowerCase().includes('blue')){skillName.classList.add('gem-blue')}}else{skillColor.style.display='none'}if(skill.description){skillDescription.textContent=skill.description;skillDescription.style.display='block'}else{skillDescription.style.display='none'}skillName.focus();document.title=`${skill.name} - Path of Exile Random Skill Selector`}function saveToLocalStorage(){try{const dataToSave={currentSkill:state.currentSkill,history:state.history};localStorage.setItem('poe-skill-selector',JSON.stringify(dataToSave))}catch(error){console.warn('Failed to save to local storage:',error)}}function loadFromLocalStorage(){try{const savedData=localStorage.getItem('poe-skill-selector');if(savedData){const parsedData=JSON.parse(savedData);if(parsedData.currentSkill){state.currentSkill=parsedData.currentSkill;updateSkillDisplay(state.currentSkill);skillDisplay.classList.remove('hidden')}if(parsedData.history&&Array.isArray(parsedData.history)){state.history=parsedData.history.slice(0,state.historyMaxSize)}state.initialized=true}}catch(error){console.warn('Failed to load from local storage:',error)}}function shuffleArray(array){for(let i=array.length-1;i>0;i--){let j;if(window.crypto&&window.crypto.getRandomValues){const array=new Uint32Array(1);window.crypto.getRandomValues(array);j=array[0]%(i+1)}else{j=Math.floor(Math.random()*(i+1))}[array[i],array[j]]=[array[j],array[i]]}return array}function setupAccessibilityPreferences(){const prefersReducedMotion=window.matchMedia('(prefers-reduced-motion: reduce)');function handleReducedMotion(e){if(e.matches){document.body.classList.add('reduced-motion')}else{document.body.classList.remove('reduced-motion')}}handleReducedMotion(prefersReducedMotion);prefersReducedMotion.addEventListener('change',handleReducedMotion)}function smoothAnimation(callback){if(window.requestAnimationFrame){requestAnimationFrame(callback)}else{setTimeout(callback,16)}}function init(){setupAccessibilityPreferences();loadFromLocalStorage();if(!state.currentSkill&&skillsData&&skillsData.length>0){}}init()});