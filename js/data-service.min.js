class SkillDataService{constructor(skillsData){this.rawData=skillsData||[];this.processedData=[];this.initialize()}initialize(){if(!this.rawData||!Array.isArray(this.rawData)||this.rawData.length===0){console.error('Invalid or empty skills data provided');return}this.processedData=this.rawData.map(skill=>this.validateSkill(skill));this.initializeRandomSelector();console.log(`Initialized SkillDataService with ${this.processedData.length} skills`)}validateSkill(skill){if(!skill)return null;const validatedSkill={name:this.validateSkillName(skill.name),type:skill.type||'',color:this.normalizeColor(skill.color),description:skill.description||''};return validatedSkill}validateSkillName(name){if(!name||typeof name!=='string'){return'Unknown Skill'}return name.trim()}normalizeColor(color){if(!color)return'';const normalizedColor=color.toLowerCase().trim();if(normalizedColor.includes('red')||normalizedColor.includes('strength')){return'Red'}else if(normalizedColor.includes('green')||normalizedColor.includes('dexterity')){return'Green'}else if(normalizedColor.includes('blue')||normalizedColor.includes('intelligence')){return'Blue'}return color}getAllSkills(){return this.processedData.filter(skill=>skill!==null)}getSkillByName(name){if(!name)return null;return this.processedData.find(skill=>skill&&skill.name.toLowerCase()===name.toLowerCase())}initializeRandomSelector(){if(typeof RandomSelector!=='undefined'){this.randomSelector=new RandomSelector(this.processedData)}else{console.warn('RandomSelector not available, using fallback random selection');this.randomSelector=null}}getRandomSkill(excludeList=[]){if(this.processedData.length===0){throw new Error('No skill data available')}if(!this.randomSelector&&typeof RandomSelector!=='undefined'){this.initializeRandomSelector()}if(this.randomSelector){try{return this.randomSelector.selectRandomSkill(true)}catch(error){console.warn('Random selector failed, using fallback:',error)}}if(excludeList.length>=this.processedData.length-1){const randomIndex=Math.floor(Math.random()*this.processedData.length);return this.processedData[randomIndex]}const availableSkills=this.processedData.filter(skill=>!excludeList.some(excludedSkill=>excludedSkill&&skill&&excludedSkill.name===skill.name));const randomIndex=Math.floor(Math.random()*availableSkills.length);return availableSkills[randomIndex]}getSkillsByType(type){if(!type)return[];return this.processedData.filter(skill=>skill&&skill.type&&skill.type.toLowerCase().includes(type.toLowerCase()))}getSkillsByColor(color){if(!color)return[];const normalizedColor=this.normalizeColor(color);return this.processedData.filter(skill=>skill&&skill.color===normalizedColor)}searchSkills(query){if(!query)return[];const normalizedQuery=query.toLowerCase().trim();return this.processedData.filter(skill=>skill&&skill.name.toLowerCase().includes(normalizedQuery))}}if(typeof module!=='undefined'&&module.exports){module.exports=SkillDataService}if(typeof window!=='undefined'){window.SkillDataService=SkillDataService}else if(typeof global!=='undefined'){global.SkillDataService=SkillDataService}